package com.solvd.mail.main;

import com.solvd.mail.buildings.PostOffice;
import com.solvd.mail.exceptions.EBuildingNameIsNull;
import com.solvd.mail.parcel.Letter;
import com.solvd.mail.parcel.Package;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.*;

//
//                                                Iterable                                              Map
//                                                   |                                                   |
//                                                   ⌄                                               SortedMap
//                                               Collection
//                                                   |
//                          List                   Queue                   Set
//


//  default: the main lifecycle, as it's responsible for project deployment
//  clean: to clean the project and remove all files generated by the previous build
//  site: to create the project's site documentation
//
//
//  validate: check if all information necessary for the build is available
//  compile: compile the source code
//  test-compile: compile the test source code
//  test: run unit tests
//  package: package compiled source code into the distributable format (jar, war, …)
//  integration-test: process and deploy the package if needed to run integration tests
//  install: install the package to a local repository
//  deploy: copy the package to the remote repository
//


public class Main {
    static final Logger LOGGER = LogManager.getLogger(Main.class);

    public static void main(String[] args) throws EBuildingNameIsNull {
//        MyLinkedList<String> list = new MyLinkedList<>();
//        list.addElement("HELLO");
//        list.addElement("HOW ARE YOU");
//        list.addElement(null);
//        list.add("HI", "YO", null, "WHAT'S UP");
//        list.add("HE HE HE HE");
//        logger.info(list);
//        logger.info(list.size());
//        logger.info(list.get(2));
//        Object[] mas = list.asArray();
//        logger.info(list.remove(null));
//        logger.info(list);
//        list.remove(0);
//        list.remove(0);
//        logger.info(list);
        Menu();
    }
//
    public static boolean printMenu() {
        LOGGER.info("""
                                
                * (1) : PRINT INFORMATION
                * (2) : GENERATE AND ADD LETTER
                * (3) : GENERATE AND ADD PACKAGE
                * (4) : SENDING DAY
                * (5) : ADD WORKERS TO OFFICE
                * (6) : PRINT WORKERS
                * (7) : ADD 20 LETTERS & PACKAGES
                * (8) : EXIT""");
        return true;
    }

    public static boolean Menu() throws EBuildingNameIsNull {
        String plank = "\n-------------------------------------------------------------------------\t";
        Scanner sc = new Scanner(System.in);
        PostOffice postOffice = PostOfficeGenerator.getPostOffice();
        int totalCost = 0;
        int choice;
        do {
            printMenu();
            choice = sc.nextInt();
            switch (choice) {
                case 1 -> LOGGER.info(plank + "\n" +
                        postOffice + plank + "\n                                              * YOUR TOTAL BILL :  " +
                        totalCost + "$\t");
                case 2 -> {
                    Letter l = DeliverableGenerator.getLetter();
                    totalCost += postOffice.send(l);
                    LOGGER.info("Generated Letter: " + l);
                }
                case 3 -> {
                    Package p = DeliverableGenerator.getPackage();
                    totalCost += postOffice.send(p);
                    LOGGER.info("Generated Package: " + p);
                }
                case 4 -> {
                    boolean success = postOffice.sendingDay();
                    if (success) {
                        LOGGER.info("   *** Sending day went successfully ***");
                    } else {
                        LOGGER.info("  *** Nothing was sent today ***");
                    }
                }
                case 5 -> {
                    postOffice.addWorker(PostOfficeGenerator.getDeliveryMan());
                    postOffice.addWorker(PostOfficeGenerator.getPostOfficeWorker());
                    postOffice.addWorker(PostOfficeGenerator.getDriver());
                    postOffice.addWorker(PostOfficeGenerator.getPilot());
                }
                case 6 -> LOGGER.info("\n" + postOffice.getWorkers());
                case 7 -> {
                    for (int i = 0; i < 20; i++) {
                        totalCost += postOffice.send(DeliverableGenerator.getLetter());
                        totalCost += postOffice.send(DeliverableGenerator.getPackage());
                    }
                    LOGGER.info("Sent 20 Letters/Packages");
                }
                default -> choice = 8;
            }
        } while (choice != 8);
        LOGGER.info(plank + "\n                                              * YOUR TOTAL BILL :  " +
                totalCost + "$\t");

        return totalCost != 0;
    }


}
